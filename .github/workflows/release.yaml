name: Release

on:
  release:
    types:
    - published

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust: [stable, nightly]
    steps:
    - name: Checkout source
      uses: actions/checkout@v5
    - name: Install Rust ${{ matrix.rust }}
      uses: dtolnay/rust-toolchain@6d653acede28d24f02e3cd41383119e8b1b35921 # master
      with:
        toolchain: ${{ matrix.rust }}
        components: clippy
    - name: Enable type layout randomization
      run: echo "RUSTFLAGS=${RUSTFLAGS} -Zrandomize-layout" >> "${GITHUB_ENV}"
      if: matrix.rust == 'nightly'
    - name: Cache 
      uses: Swatinem/rust-cache@f13886b937689c021905a6b90929199931d60db1 # v2.8.1
    - name: Run Clippy check
      uses: clechasseur/rs-clippy-check@69da786488ddcceb16285b0219841750089369ba # v5.0.1
      with:
        args: --no-deps --all-features
    - name: Run tests
      run: cargo test

  container_image:
    name: Container Image
    needs:
    - test
    uses: ./.github/workflows/container-image.yaml
    with:
      images: ghcr.io/${{ github.repository }}
      push: true
    secrets:
      password: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - { os: ubuntu-latest, platform: linux, arch: amd64 }
        - { os: ubuntu-latest, platform: linux, arch: arm64 }
        - { os: ubuntu-24.04-arm, platform: linux, arch: arm64 }
        - { os: macos-latest, platform: darwin, arch: aarch64 }
        - { os: macos-26, platform: darwin, arch: aarch64 }
        - { os: windows-latest, platform: windows, arch: amd64 }
        - { os: windows-11-arm, platform: windows, arch: arm64 }
    outputs:
      zeta_version: ${{ steps.artifact.outputs.version }}
    needs:
    - test
    steps:
    - name: Checkout source
      uses: actions/checkout@v5
    - name: Install Rust
      uses: dtolnay/rust-toolchain@6d653acede28d24f02e3cd41383119e8b1b35921 # master
      with:
        toolchain: stable
    - name: Install cargo-auditable
      run: cargo install cargo-auditable
      # Note that we're deliberately avoiding reusing the build cache.
    - name: Build
      run: cargo auditable build --release
    - name: Determine version
      id: artifact
      run: |-
        VERSION="$(cargo metadata --format-version 1 --no-deps | jq -r '.packages[] | select(.name == "zeta") | .version')"
        echo "version=${VERSION}" >> "${GITHUB_OUTPUT}"
    - name: Upload executable
      uses: actions/upload-artifact@v4
      with:
        name: zeta-${{ matrix.platform }}-${{ matrix.arch }}
        path: target/release/zeta${{ matrix.os == 'windows-latest' && '.exe' || '' }}
